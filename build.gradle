buildscript {
    repositories {
        maven {
            name 'Gradle'
            url "https://plugins.gradle.org/m2/"
        }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'io.github.0ffz', name: 'gpr-for-gradle', version: '1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: 'io.github.0ffz.github-packages'
apply plugin: 'org.spongepowered.mixin'

version = "${project.mc_version}-${project.mod_version}"
group = "com.github.razordevs.${mod_id}"

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }

    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/The-Aether")

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.2")) {
        jarJar.ranged(it, "[0.3.2,)")
    }

    // Aether
    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")
    implementation fg.deobf("com.aetherteam.aether:aether:${project.aether_version}")
    
    // Quark
    implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    implementation fg.deobf("curse.maven:zeta-968868:${zeta_version}")
    implementation fg.deobf("curse.maven:quark-oddities-301051:3575623")
    
    // Extra
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
}


tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: mc_version, minecraft_version_range: mc_version,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: forge_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

mixin {
    config "${project.mod_id}.mixins.json"
    add sourceSets.main, "${project.mod_id}.refmap.json"
}