buildscript {
    repositories {
        maven {
            name 'Gradle'
            url "https://plugins.gradle.org/m2/"
        }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'io.github.0ffz', name: 'gpr-for-gradle', version: '1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}



plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'io.github.0ffz.github-packages'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'com.razordevs.ascended_quark' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.modid

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: '1.19.2'

    runs {
        configureEach {
            workingDirectory project.file('run')

            property "${modid}.iside", 'true'
//            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info' // info is the default for production

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            property 'forge.enabledGameTestNamespaces', modid

            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', modid
        }

        data {
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/'), '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus'

            environment 'target', 'fmluserdevdata'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    flatDir {
        dir 'libs'
    }
    maven { url = "https://www.cursemaven.com" }
    maven {
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.23'


    implementation fg.deobf("com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}")
    implementation fg.deobf("com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")
    implementation fg.deobf("com.aetherteam.aether:aether:${project.aether_version}")
    implementation fg.deobf("vazkii.quark:Quark:${quark_version}")
    implementation fg.deobf("vazkii.autoreglib:AutoRegLib:${autoreglib_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "ascended_quark",
                "Specification-Vendor"    : "teamrazor",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "teamrazor",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


mixin {
    config "${project.modid}.mixins.json"
    add sourceSets.main, "${project.modid}.refmap.json"
}
